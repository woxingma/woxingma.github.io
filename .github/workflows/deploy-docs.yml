---
name: Deploy MKDocs Documentation

'on':
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'requirements.txt'
      - '.github/workflows/deploy-docs.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # ============================================================================
  # JOB 1: Comprehensive Linting and Testing
  # ============================================================================
  lint-and-test:
    name: Lint and Test Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ------------------------------------------------------------------------
      # YAML Linting
      # ------------------------------------------------------------------------
      - name: Lint YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: mkdocs.yml .github/workflows/
          config_data: |
            extends: default
            rules:
              line-length:
                max: 120
                level: warning
              indentation:
                spaces: 2
              truthy:
                allowed-values: ['true', 'false', 'yes', 'no']

      # ------------------------------------------------------------------------
      # Markdown Linting
      # ------------------------------------------------------------------------
      - name: Setup Node.js for markdownlint
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install markdownlint-cli2
        run: npm install -g markdownlint-cli2

      - name: Lint Markdown files
        run: |
          echo "üìù Running markdown linting..."
          markdownlint-cli2 "docs/**/*.md" --config .markdownlint.yml
          echo "‚úÖ Markdown linting passed"

      # ------------------------------------------------------------------------
      # Python Setup and Dependencies
      # ------------------------------------------------------------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip list

      # ------------------------------------------------------------------------
      # CSS and JavaScript Validation (Optional)
      # ------------------------------------------------------------------------
      - name: Validate custom CSS
        if: hashFiles('docs/assets/stylesheets/*.css') != ''
        run: |
          echo "üé® Checking CSS syntax..."
          # Basic CSS syntax check
          for file in docs/assets/stylesheets/*.css; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              # Simple validation - check for basic syntax errors
              if grep -q '[{};]' "$file"; then
                echo "‚úÖ $file appears valid"
              fi
            fi
          done

      - name: Validate custom JavaScript
        if: hashFiles('docs/assets/javascripts/*.js') != ''
        run: |
          echo "üìú Checking JavaScript syntax..."
          for file in docs/assets/javascripts/*.js; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              node --check "$file" && echo "‚úÖ $file is valid"
            fi
          done

      # ------------------------------------------------------------------------
      # MKDocs Configuration Validation
      # ------------------------------------------------------------------------
      - name: Validate MKDocs configuration
        run: |
          echo "‚öôÔ∏è Validating MKDocs configuration..."
          python -c "import yaml; yaml.safe_load(open('mkdocs.yml'))" && echo "‚úÖ mkdocs.yml is valid YAML"
          mkdocs --version
          echo "‚úÖ MKDocs configuration validated"

      # ------------------------------------------------------------------------
      # Internal Link Checking
      # ------------------------------------------------------------------------
      - name: Check internal links
        run: |
          echo "üîó Checking internal markdown links..."
          # Check for broken internal links in markdown files
          python << 'EOF'
          import re
          import os
          from pathlib import Path

          docs_dir = Path("docs")
          errors = []

          for md_file in docs_dir.rglob("*.md"):
              content = md_file.read_text()
              # Find markdown links [text](path)
              links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', content)

              for text, link in links:
                  # Skip external links and anchors
                  if link.startswith(('http://', 'https://', '#', 'mailto:')):
                      continue

                  # Resolve relative links
                  if link.startswith('../'):
                      target = (md_file.parent / link).resolve()
                  elif link.startswith('./'):
                      target = (md_file.parent / link[2:]).resolve()
                  else:
                      target = (md_file.parent / link).resolve()

                  # Check if target exists
                  if not target.exists():
                      errors.append(f"Broken link in {md_file}: [{text}]({link})")

          if errors:
              print("‚ùå Found broken internal links:")
              for error in errors:
                  print(f"  - {error}")
              exit(1)
          else:
              print("‚úÖ All internal links are valid")
          EOF

      # ------------------------------------------------------------------------
      # Image Reference Validation
      # ------------------------------------------------------------------------
      - name: Validate image references
        run: |
          echo "üñºÔ∏è Checking image references..."
          python << 'EOF'
          import re
          from pathlib import Path

          docs_dir = Path("docs")
          errors = []

          for md_file in docs_dir.rglob("*.md"):
              content = md_file.read_text()
              # Find image references ![alt](path)
              images = re.findall(r'!\[([^\]]*)\]\(([^)]+)\)', content)

              for alt, img_path in images:
                  # Skip external images
                  if img_path.startswith(('http://', 'https://')):
                      continue

                  # Resolve relative paths
                  if img_path.startswith('assets/'):
                      target = docs_dir / img_path
                  elif img_path.startswith('../'):
                      target = (md_file.parent / img_path).resolve()
                  else:
                      target = (md_file.parent / img_path).resolve()

                  if not target.exists():
                      errors.append(f"Missing image in {md_file}: {img_path}")

          if errors:
              print("‚ùå Found missing images:")
              for error in errors:
                  print(f"  - {error}")
              exit(1)
          else:
              print("‚úÖ All image references are valid")
          EOF

      # ------------------------------------------------------------------------
      # Test Build with Strict Mode
      # ------------------------------------------------------------------------
      - name: Test build documentation (strict mode)
        run: |
          echo "üèóÔ∏è Building documentation in strict mode..."
          mkdocs build --clean --strict --verbose
          echo "‚úÖ Documentation built successfully"

      # ------------------------------------------------------------------------
      # Check for TODO/FIXME comments
      # ------------------------------------------------------------------------
      - name: Check for TODO/FIXME items
        run: |
          echo "üìã Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" docs/ --include="*.md" > /dev/null; then
            echo "‚ö†Ô∏è Found TODO/FIXME items:"
            grep -rn "TODO\|FIXME" docs/ --include="*.md" || true
            echo "Note: These should be addressed before production deployment"
          else
            echo "‚úÖ No TODO/FIXME items found"
          fi

      # ------------------------------------------------------------------------
      # Generate Build Report
      # ------------------------------------------------------------------------
      - name: Generate validation report
        if: always()
        run: |
          echo "üìä Validation Summary Report"
          echo "============================"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo ""
          echo "‚úÖ YAML validation: Passed"
          echo "‚úÖ Markdown linting: Passed"
          echo "‚úÖ MKDocs configuration: Valid"
          echo "‚úÖ Internal links: Validated"
          echo "‚úÖ Image references: Validated"
          echo "‚úÖ Test build: Successful"
          echo ""
          echo "Documentation is ready for deployment!"

  # ============================================================================
  # JOB 2: Build Documentation
  # ============================================================================
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git for gh-deploy
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Build documentation
        run: |
          echo "üèóÔ∏è Building MKDocs site..."
          mkdocs build --clean --verbose
          echo "‚úÖ Build completed successfully"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

  # ============================================================================
  # JOB 3: Deploy to GitHub Pages
  # ============================================================================
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git for deployment
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Deploy to GitHub Pages (gh-deploy)
        run: |
          echo "üöÄ Deploying to GitHub Pages..."
          mkdocs gh-deploy --force --clean --verbose --message "Deploy documentation from commit ${{ github.sha }}"
          echo "‚úÖ Deployment completed"

      - name: Deployment confirmation
        run: |
          echo "üéâ Documentation deployed successfully!"
          echo "üìñ Site URL: https://www.onyxultrasonics.co.uk"
          echo "üîó GitHub Pages: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

  # ============================================================================
  # JOB 4: Notification and Status Summary
  # ============================================================================
  notify:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, deploy]
    if: always()

    steps:
      - name: Check deployment status
        run: |
          echo "================================================"
          echo "     MKDOCS DEPLOYMENT STATUS SUMMARY"
          echo "================================================"
          echo ""
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Triggered by: ${{ github.actor }}"
          echo ""

          if [ "${{ needs.lint-and-test.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ] && \
             [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Status: SUCCESS"
            echo ""
            echo "üöÄ Documentation has been successfully deployed!"
            echo ""
            echo "üìñ View your documentation at:"
            echo "   ‚Üí https://www.onyxultrasonics.co.uk"
            echo ""
            echo "üîó GitHub Pages URL:"
            echo "   ‚Üí https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
            echo ""
            echo "üìù Summary:"
            echo "   ‚úÖ Linting and validation: Passed"
            echo "   ‚úÖ Documentation build: Success"
            echo "   ‚úÖ GitHub Pages deployment: Complete"
            echo ""
            echo "================================================"
          else
            echo "‚ùå Status: FAILED"
            echo ""
            echo "One or more jobs failed:"
            echo "   Lint & Test: ${{ needs.lint-and-test.result }}"
            echo "   Build: ${{ needs.build.result }}"
            echo "   Deploy: ${{ needs.deploy.result }}"
            echo ""
            echo "Please check the workflow logs for details."
            echo "================================================"
            exit 1
          fi
